// Generated by CoffeeScript 1.9.3
(function() {
  var Command, CommandListItemView, CommandListView, Commands, ContainerView, ControlsView, Events, Instruction, Interpreter, KeyboardView, Memory, MonitorView, PeripheralsView, Rsc, Session, StorageLocation, Utils, root,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Instruction = (function() {
    Instruction.fromCommand = function(command) {
      return new Instructions[command.command](command);
    };

    function Instruction(command1) {
      this.command = command1;
    }

    Instruction.prototype.isExecutable = function() {
      return true;
    };

    Instruction.prototype.getLocation = function(memory) {
      return memory.getStorageLocationAtIndex(this.command.arg1);
    };

    return Instruction;

  })();

  var Instructions = {};

  Instructions.LDA = (function(superClass) {
    extend(LDA, superClass);

    function LDA() {
      return LDA.__super__.constructor.apply(this, arguments);
    }

    LDA.prototype.execute = function(session, memory, peripherals) {
      session.accumulator = this.getLocation(memory).value;
      return session.incrementProgramCounter();
    };

    return LDA;

  })(Instruction);

  Instructions.LDC = (function(superClass) {
    extend(LDC, superClass);

    function LDC() {
      return LDC.__super__.constructor.apply(this, arguments);
    }

    LDC.prototype.execute = function(session, memory, peripherals) {
      session.accumulator = this.command.arg1;
      return session.incrementProgramCounter();
    };

    return LDC;

  })(Instruction);

  Instructions.STA = (function(superClass) {
    extend(STA, superClass);

    function STA() {
      return STA.__super__.constructor.apply(this, arguments);
    }

    STA.prototype.execute = function(session, memory, peripherals) {
      this.getLocation(memory).value = session.accumulator;
      return session.incrementProgramCounter();
    };

    return STA;

  })(Instruction);

  Instructions.INP = (function(superClass) {
    extend(INP, superClass);

    function INP() {
      return INP.__super__.constructor.apply(this, arguments);
    }

    INP.prototype.execute = function(session, memory, peripherals) {
      return session.incrementProgramCounter();
    };

    return INP;

  })(Instruction);

  Instructions.OUT = (function(superClass) {
    extend(OUT, superClass);

    function OUT() {
      return OUT.__super__.constructor.apply(this, arguments);
    }

    OUT.prototype.execute = function(session, memory, peripherals) {
      peripherals.monitor.displayValue(this.getLocation(memory).value);
      return session.incrementProgramCounter();
    };

    return OUT;

  })(Instruction);

  Instructions.ADC = (function(superClass) {
    extend(ADC, superClass);

    function ADC() {
      return ADC.__super__.constructor.apply(this, arguments);
    }

    ADC.prototype.execute = function(session, memory, peripherals) {
      session.accumulator += this.command.arg1;
      return session.incrementProgramCounter();
    };

    return ADC;

  })(Instruction);

  Instructions.ADD = (function(superClass) {
    extend(ADD, superClass);

    function ADD() {
      return ADD.__super__.constructor.apply(this, arguments);
    }

    ADD.prototype.execute = function(session, memory, peripherals) {
      session.accumulator += this.getLocation(memory).value;
      return session.incrementProgramCounter();
    };

    return ADD;

  })(Instruction);

  Instructions.SUB = (function(superClass) {
    extend(SUB, superClass);

    function SUB() {
      return SUB.__super__.constructor.apply(this, arguments);
    }

    SUB.prototype.execute = function(session, memory, peripherals) {
      session.accumulator -= this.getLocation(memory).value;
      return session.incrementProgramCounter();
    };

    return SUB;

  })(Instruction);

  Instructions.MUL = (function(superClass) {
    extend(MUL, superClass);

    function MUL() {
      return MUL.__super__.constructor.apply(this, arguments);
    }

    MUL.prototype.execute = function(session, memory, peripherals) {
      session.accumulator *= this.getLocation(memory).value;
      return session.incrementProgramCounter();
    };

    return MUL;

  })(Instruction);

  Instructions.DIV = (function(superClass) {
    extend(DIV, superClass);

    function DIV() {
      return DIV.__super__.constructor.apply(this, arguments);
    }

    DIV.prototype.execute = function(session, memory, peripherals) {
      session.accumulator /= this.getLocation(memory).value;
      return session.incrementProgramCounter();
    };

    return DIV;

  })(Instruction);

  Instructions.BRU = (function(superClass) {
    extend(BRU, superClass);

    function BRU() {
      return BRU.__super__.constructor.apply(this, arguments);
    }

    BRU.prototype.execute = function(session, memory, peripherals) {
      return session.programCounter = this.command.arg1;
    };

    return BRU;

  })(Instruction);

  Instructions.BPA = (function(superClass) {
    extend(BPA, superClass);

    function BPA() {
      return BPA.__super__.constructor.apply(this, arguments);
    }

    BPA.prototype.execute = function(session, memory, peripherals) {
      if (session.accumulator > 0) {
        return session.programCounter = this.command.arg1;
      } else {
        return session.incrementProgramCounter();
      }
    };

    return BPA;

  })(Instruction);

  Instructions.BNA = (function(superClass) {
    extend(BNA, superClass);

    function BNA() {
      return BNA.__super__.constructor.apply(this, arguments);
    }

    BNA.prototype.execute = function(session, memory, peripherals) {
      if (session.accumulator < 0) {
        return session.programCounter = this.command.arg1;
      } else {
        return session.incrementProgramCounter();
      }
    };

    return BNA;

  })(Instruction);

  Instructions.BZA = (function(superClass) {
    extend(BZA, superClass);

    function BZA() {
      return BZA.__super__.constructor.apply(this, arguments);
    }

    BZA.prototype.execute = function(session, memory, peripherals) {
      if (session.accumulator === 0) {
        return session.programCounter = this.command.arg1;
      } else {
        return session.incrementProgramCounter();
      }
    };

    return BZA;

  })(Instruction);

  Instructions.STP = (function(superClass) {
    extend(STP, superClass);

    function STP() {
      return STP.__super__.constructor.apply(this, arguments);
    }

    STP.prototype.execute = function(session, memory, peripherals) {
      return session["continue"] = false;
    };

    return STP;

  })(Instruction);

  Interpreter = (function() {
    function Interpreter(peripherals1) {
      this.peripherals = peripherals1;
    }

    Interpreter.prototype.interpret = function(commands) {
      var currentInstruction, memory, results, session;
      memory = this.buildMemory(commands);
      session = new Session();
      results = [];
      while (session.shouldContinue()) {
        currentInstruction = memory.getInstructionAtIndex(session.programCounter);
        results.push(currentInstruction.execute(session, memory, this.peripherals));
      }
      return results;
    };

    Interpreter.prototype.buildMemory = function(commands) {
      var command, list;
      list = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = commands.length; i < len; i++) {
          command = commands[i];
          if (command != null) {
            results.push(Instruction.fromCommand(command));
          } else {
            results.push(new StorageLocation());
          }
        }
        return results;
      })();
      return new Memory(list);
    };

    return Interpreter;

  })();

  Memory = (function() {
    function Memory(values) {
      this.values = values;
    }

    Memory.prototype.getInstructionAtIndex = function(index) {
      var instruction;
      instruction = this.values[index];
      if ((instruction != null) && instruction.isExecutable()) {
        return instruction;
      } else {
        return null;
      }
    };

    Memory.prototype.getStorageLocationAtIndex = function(index) {
      var location;
      location = this.values[index];
      if ((location != null) && !location.isExecutable()) {
        return location;
      } else {
        return null;
      }
    };

    return Memory;

  })();

  Session = (function() {
    function Session() {
      this.accumulator = (Math.round(Math.random() * Math.pow(10, 6)) / 100) * (Math.random() > 0.5 ? -1 : 1);
      this.programCounter = 0;
      this["continue"] = true;
    }

    Session.prototype.incrementProgramCounter = function() {
      return this.programCounter += 1;
    };

    Session.prototype.shouldContinue = function() {
      return this["continue"];
    };

    return Session;

  })();

  StorageLocation = (function() {
    function StorageLocation(value1) {
      this.value = value1 != null ? value1 : null;
    }

    StorageLocation.prototype.isExecutable = function() {
      return false;
    };

    return StorageLocation;

  })();

  Command = (function() {
    Command.parse = function(text) {
      var tokens;
      tokens = this.tokenize(this.sanitize(text));
      return new Command(tokens[0], tokens[1]);
    };

    Command.sanitize = function(text) {
      return text.trim().replace(/\s+/g, ' ').toUpperCase();
    };

    Command.tokenize = function(text) {
      return text.split(' ');
    };

    function Command(command1, arg1) {
      this.command = command1;
      this.properties = Commands.get(this.command);
      if (arg1 != null) {
        this.arg1 = parseFloat(arg1);
      }
      this.resetErrors();
    }

    Command.prototype.isValid = function() {
      this.setErrors();
      return this.errors.length === 0;
    };

    Command.prototype.resetErrors = function() {
      return this.errors = [];
    };

    Command.prototype.setErrors = function() {
      this.resetErrors();
      return this.checkCommandExists() && this.checkValidArity() && this.checkArgNumericality();
    };

    Command.prototype.checkCommandExists = function() {
      if (this.properties == null) {
        this.errors.push("'" + this.command + "' is not a valid command.");
        return false;
      } else {
        return true;
      }
    };

    Command.prototype.checkValidArity = function() {
      if (!this.hasValidArity()) {
        this.errors.push(this.properties.errors.wrongArity);
        return false;
      } else {
        return true;
      }
    };

    Command.prototype.checkArgNumericality = function() {
      if (this.arity() > 0) {
        if (Utils.isNumeric(this.arg1)) {
          return true;
        } else {
          this.errors.push("The argument following " + this.command + " must be a number.");
          return false;
        }
      } else {
        return true;
      }
    };

    Command.prototype.arity = function() {
      if (this.arg1 != null) {
        return 1;
      } else {
        return 0;
      }
    };

    Command.prototype.hasValidArity = function() {
      return this.properties.arity === this.arity();
    };

    return Command;

  })();

  Commands = (function() {
    function Commands() {}

    Commands.all = {
      LDA: {
        arity: 1,
        errors: {
          wrongArity: 'LDA must be given a location to load from.'
        }
      },
      LDC: {
        arity: 1,
        errors: {
          wrongArity: 'LDC must be given a constant value to load.'
        }
      },
      STA: {
        arity: 1,
        errors: {
          wrongArity: 'STA must be given a location to store the ' + 'accumulator value in.'
        }
      },
      INP: {
        arity: 1,
        errors: {
          wrongArity: 'INP must be given a location to store the ' + 'user inputted value.'
        }
      },
      OUT: {
        arity: 1,
        errors: {
          wrongArity: 'OUT must be given the location of the value ' + 'to print.'
        }
      },
      ADC: {
        arity: 1,
        errors: {
          wrongArity: 'ADC must be given a constant value to add to ' + 'the accumulator.'
        }
      },
      ADD: {
        arity: 1,
        errors: {
          wrongArity: 'ADD must be given the location of the value ' + 'to add to the accumulator.'
        }
      },
      SUB: {
        arity: 1,
        errors: {
          wrongArity: 'SUB must be given the location of the value ' + 'to subtract from the accumulator.'
        }
      },
      MUL: {
        arity: 1,
        errors: {
          wrongArity: 'MUL must be given the location of the value to ' + 'subtract from the accumulator.'
        }
      },
      DIV: {
        arity: 1,
        errors: {
          wrongArity: 'DIV must be given the location of the value to ' + 'subtract from the accumulator.'
        }
      },
      BRU: {
        arity: 1,
        errors: {
          wrongArity: 'BRU must be given the location to branch to.'
        }
      },
      BNA: {
        arity: 1,
        errors: {
          wrongArity: 'BNA must be given the location to branch to.'
        }
      },
      BPA: {
        arity: 1,
        errors: {
          wrongArity: 'BPA must be given the location to branch to.'
        }
      },
      BZA: {
        arity: 1,
        errors: {
          wrongArity: 'BZA must be given the location to branch to.'
        }
      },
      STP: {
        arity: 0,
        errors: {
          wrongArity: 'STP does not accept any arguments.'
        }
      }
    };

    Commands.get = function(name) {
      return this.all[name];
    };

    return Commands;

  })();

  Events = (function() {
    function Events() {}

    Events.fireIfDefined = function() {
      var args, callbackName, obj;
      obj = arguments[0], callbackName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (obj[callbackName] != null) {
        return obj[callbackName].apply(this, args);
      }
    };

    return Events;

  })();

  Utils = (function() {
    function Utils() {}

    Utils.isNumeric = function(num) {
      return !isNaN(parseFloat(num)) && isFinite(num);
    };

    return Utils;

  })();

  Rsc = (function() {
    Rsc.defaultNumColumns = 3;

    Rsc.defaultNumRows = 15;

    function Rsc(selector, options) {
      if (options == null) {
        options = {};
      }
      this.container = new ContainerView(options);
      $(selector).replaceWith(this.container.elem);
    }

    return Rsc;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Rsc = Rsc;

  CommandListItemView = (function() {
    CommandListItemView.template = '<div class=\'rsc-command-list-item\'>\n  <div class=\'rsc-line-number rsc-computer-font\'></div>\n  <input type=\'text\' maxlength=\'7\' class=\'rsc-input-field rsc-computer-font\' />\n  <div class=\'rsc-syntax-error\'>×</div>\n</div>';

    function CommandListItemView(model) {
      this.elem = $(CommandListItemView.template);
      this.lineNumber = $('.rsc-line-number', this.elem);
      this.syntaxErrorField = $('.rsc-syntax-error', this.elem);
      this.inputField = $("input[type='text']", this.elem);
      this.command = model;
      this.inputField.blur((function(_this) {
        return function() {
          return _this.validate();
        };
      })(this));
      this.inputField.keydown((function(_this) {
        return function(e) {
          if (_this.indicatesNextFieldHighlight(e)) {
            return Events.fireIfDefined(_this, 'onHighlightNextFieldCallback');
          } else if (_this.indicatesPreviousFieldHighlight(e)) {
            return Events.fireIfDefined(_this, 'onHighlightPreviousFieldCallback');
          }
        };
      })(this));
    }

    CommandListItemView.prototype.focus = function() {
      this.inputField.focus();
      return this.inputField.select();
    };

    CommandListItemView.prototype.validate = function() {
      var val, valid, visibility;
      val = this.inputField.val();
      valid = true;
      if (val.trim() === '') {
        this.command = null;
      } else {
        this.command = Command.parse(this.inputField.val());
        valid = this.command.isValid();
      }
      visibility = valid ? 'hidden' : 'visible';
      this.syntaxErrorField.css('visibility', visibility);
      if (valid) {
        this.elem.removeClass('error');
      } else {
        this.elem.addClass('error');
      }
      return Events.fireIfDefined(this, 'onValidateFinishedCallback');
    };

    CommandListItemView.prototype.onHighlightNextField = function(callback) {
      return this.onHighlightNextFieldCallback = callback;
    };

    CommandListItemView.prototype.onHighlightPreviousField = function(callback) {
      return this.onHighlightPreviousFieldCallback = callback;
    };

    CommandListItemView.prototype.onValidateFinished = function(callback) {
      return this.onValidateFinishedCallback = callback;
    };

    CommandListItemView.prototype.indicatesNextFieldHighlight = function(e) {
      return e.keyCode === 13 || e.keyCode === 40;
    };

    CommandListItemView.prototype.indicatesPreviousFieldHighlight = function(e) {
      return e.keyCode === 38;
    };

    return CommandListItemView;

  })();

  CommandListView = (function() {
    CommandListView.template = '<div class=\'rsc-command-list\'>\n  <h4 class=\'rsc-computer-font\'>Command List</h4>\n  <div class=\'rsc-commands-container\'></div>\n  <div class=\'rsc-error-list\'></div>\n</div>';

    CommandListView.columnTemplate = '<div class=\'rsc-command-list-column\'></div>';

    CommandListView.errorMessageTemplate = '<p>\n  <u><strong>Line %{lineNumber}</strong></u>:\n  <span class=\'rsc-computer-font\'>%{errorMessage}</span>\n</p>';

    function CommandListView(model1, options) {
      var col, colElem, commandList, item, row, rowElems;
      this.model = model1;
      if (options == null) {
        options = {};
      }
      this.elem = $(CommandListView.template);
      this.errorList = $('.rsc-error-list', this.elem);
      this.numColumns = options.numColumns || Rsc.defaultNumColumns;
      this.numRows = options.numRows || Rsc.defaultNumRows;
      commandList = $('.rsc-commands-container', this.elem);
      this.columns = (function() {
        var i, ref, results;
        results = [];
        for (col = i = 0, ref = this.numColumns; 0 <= ref ? i < ref : i > ref; col = 0 <= ref ? ++i : --i) {
          colElem = $(CommandListView.columnTemplate);
          rowElems = (function() {
            var j, ref1, results1;
            results1 = [];
            for (row = j = 0, ref1 = this.numRows; 0 <= ref1 ? j < ref1 : j > ref1; row = 0 <= ref1 ? ++j : --j) {
              item = this.createListItemAt(col, row);
              item.lineNumber.text(this.getLineNumber(col, row).toString());
              colElem.append(item.elem);
              results1.push(item);
            }
            return results1;
          }).call(this);
          commandList.append(colElem);
          results.push(rowElems);
        }
        return results;
      }).call(this);
    }

    CommandListView.prototype.createListItemAt = function(col, row) {
      var item;
      item = new CommandListItemView();
      item.onHighlightNextField((function(_this) {
        return function() {
          return _this.getField(_this.nextColumn(col, row), _this.nextRow(col, row)).focus();
        };
      })(this));
      item.onHighlightPreviousField((function(_this) {
        return function() {
          return _this.getField(_this.prevColumn(col, row), _this.prevRow(col, row)).focus();
        };
      })(this));
      item.onValidateFinished((function(_this) {
        return function() {
          return _this.updateErrorList();
        };
      })(this));
      return item;
    };

    CommandListView.prototype.updateErrorList = function() {
      this.errorList.html('');
      return this.eachField((function(_this) {
        return function(col, row, field) {
          var error, i, len, lineNumber, ref, results;
          if (field.command != null) {
            ref = field.command.errors;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              error = ref[i];
              lineNumber = _this.getLineNumber(col, row);
              results.push(_this.errorList.append(CommandListView.errorMessageTemplate.replace('%{lineNumber}', lineNumber).replace('%{errorMessage}', error)));
            }
            return results;
          }
        };
      })(this));
    };

    CommandListView.prototype.prevColumn = function(col, row) {
      if (row === 0) {
        if (col > 0) {
          return col - 1;
        }
      }
      return col;
    };

    CommandListView.prototype.prevRow = function(col, row) {
      if (row === 0) {
        if (col > 0) {
          return this.numRows - 1;
        }
      } else {
        return row - 1;
      }
      return row;
    };

    CommandListView.prototype.nextColumn = function(col, row) {
      if (row >= this.numRows - 1) {
        if (col < this.numColumns - 1) {
          return col + 1;
        }
      }
      return col;
    };

    CommandListView.prototype.nextRow = function(col, row) {
      if (row >= this.numRows - 1) {
        if (col < this.numColumns - 1) {
          return 0;
        }
      } else {
        return row + 1;
      }
      return row;
    };

    CommandListView.prototype.getLineNumber = function(col, row) {
      return this.getFieldIndex(col, row) + 1;
    };

    CommandListView.prototype.getFieldIndex = function(col, row) {
      return (col * this.numRows) + row;
    };

    CommandListView.prototype.eachField = function(callback) {
      var col, colObj, i, len, ref, results, row, rowObj;
      ref = this.columns;
      results = [];
      for (col = i = 0, len = ref.length; i < len; col = ++i) {
        colObj = ref[col];
        results.push((function() {
          var j, len1, results1;
          results1 = [];
          for (row = j = 0, len1 = colObj.length; j < len1; row = ++j) {
            rowObj = colObj[row];
            results1.push(callback(col, row, this.getField(col, row)));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    CommandListView.prototype.getCommands = function() {
      var commands;
      commands = [];
      this.eachField(function(col, row, field) {
        return commands.push(field.command);
      });
      return commands;
    };

    CommandListView.prototype.getField = function(col, row) {
      return this.columns[col][row];
    };

    return CommandListView;

  })();

  ContainerView = (function() {
    ContainerView.template = '<div class=\'rsc-container\'>\n  <div class=\'rsc-command-list-container\'></div>\n  <div class=\'rsc-peripherals-container\'></div>\n  <div class=\'rsc-controls-container\'></div>\n</div>';

    function ContainerView(options) {
      if (options == null) {
        options = {};
      }
      this.elem = $(ContainerView.template);
      this.commandListContainer = $('.rsc-command-list-container', this.elem);
      this.peripheralsContainer = $('.rsc-peripherals-container', this.elem);
      this.controlsContainer = $('.rsc-controls-container', this.elem);
      this.commandList = new CommandListView();
      this.commandListContainer.append(this.commandList.elem);
      this.peripherals = new PeripheralsView();
      this.peripheralsContainer.append(this.peripherals.elem);
      this.peripherals.keyboard.onInputReceived(function(val) {});
      this.controls = new ControlsView();
      this.controlsContainer.append(this.controls.elem);
      $('.click-me', this.elem).click((function(_this) {
        return function() {
          var interpreter, res;
          interpreter = new Interpreter(_this.peripherals);
          return res = interpreter.interpret(_this.commandList.getCommands());
        };
      })(this));
    }

    return ContainerView;

  })();

  ControlsView = (function() {
    ControlsView.template = '<div class=\'rsc-controls\'>\n  <h4 class=\'rsc-computer-font\'>Controls</h4>\n  <input type=\'button\' value=\'Run Program\' class=\'click-me rsc-button\' />\n  <input type=\'button\' value=\'Clear Mem\' class=\'rsc-button\' />\n</div>';

    function ControlsView() {
      this.elem = $(ControlsView.template);
    }

    return ControlsView;

  })();

  KeyboardView = (function() {
    KeyboardView.template = '<div class=\'rsc-peripheral-keyboard\'>\n  <div class=\'rsc-keyboard-image\'></div>\n  <input type=\'text\' class=\'rsc-input-field rsc-computer-font\' />\n  <div class=\'rsc-computer-font rsc-error\' style=\'display: none\'>\n    × Input must be a number!\n  </div>\n</div>';

    function KeyboardView() {
      this.elem = $(KeyboardView.template);
      this.inputField = $("input[type='text']", this.elem);
      this.errorMessage = $('.rsc-error', this.elem);
      this.inputField.keydown((function(_this) {
        return function(e) {
          if (e.keyCode === 13) {
            if (Utils.isNumeric(_this.inputField.val())) {
              Events.fireIfDefined(_this, 'onInputReceivedCallback', parseFloat(_this.inputField.val()));
              return _this.errorMessage.hide();
            } else {
              return _this.errorMessage.show();
            }
          }
        };
      })(this));
    }

    KeyboardView.prototype.onInputReceived = function(callback) {
      return this.onInputReceivedCallback = callback;
    };

    KeyboardView.prototype.reset = function() {
      this.errorMessage.hide();
      return this.inputField.val('');
    };

    return KeyboardView;

  })();

  MonitorView = (function() {
    MonitorView.template = '<div class=\'rsc-peripheral-monitor\'>\n  <div class=\'rsc-monitor-image\'>\n    <div class=\'rsc-monitor-output-field rsc-computer-font\'></div>\n  </div>\n</div>';

    function MonitorView() {
      this.elem = $(MonitorView.template);
      this.outputField = $('.rsc-monitor-output-field', this.elem);
    }

    MonitorView.prototype.displayValue = function(value) {
      return this.outputField.text(value.toFixed(1));
    };

    MonitorView.prototype.reset = function() {
      return this.outputField.text('');
    };

    return MonitorView;

  })();

  PeripheralsView = (function() {
    PeripheralsView.template = '<div class=\'rsc-peripherals\'>\n  <h4 class=\'rsc-computer-font\'>Peripherals</h4>\n</div>';

    function PeripheralsView() {
      this.elem = $(PeripheralsView.template);
      this.monitor = new MonitorView();
      this.elem.append(this.monitor.elem);
      this.keyboard = new KeyboardView();
      this.elem.append(this.keyboard.elem);
    }

    return PeripheralsView;

  })();

}).call(this);
